[{"title":"Hello World","url":"/2019/04/20/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"},{"title":"Centos下搭建Django网站环境","url":"/2019/04/20/django-nginx-uwsgi-server/","content":"\n### 前言\n\n作为django网站开发的学习者，这是我在搭建Centos-Django-Nginx-Uwsgi服务器时留下的笔记。在搭建过程中，参考了大量的网上教程，但是没有一篇能完整地带我正确地走过全部流程，大坑小坑不计其数，因此在这里和大家分享一下我搭建过程中的整个流程，希望对学习者有所帮助。\n\n### 安装Python3.6\n\n- 安装依赖工具\n\n  ```\n  sudo yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel mysql-devel gcc gcc-devel python-devel\n  ```\n\n- 下载python3.6.8\n\n  ```\n  wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz\n  ```\n\n- 解压\n\n  ```\n  tar -zxvf Python-3.6.8.tgz\n  ```\n\n- 将python移动至规范的软件安装目录\n\n  ```\n  sudo mv Python-3.6.8 /usr/local\n  ```\n\n- 编译安装python\n\n  ```\n  cd /usr/local/Python-3.6.8/\n  ./configure\n  make\n  sudo make install\n  ```\n\n### 安装虚拟环境\n\n- 安装virtualenvwrapper\n\n  ```\n  # update pip\n  sudo /usr/local/bin/pip3 install --upgrade pip\n  sudo /usr/local/bin/pip3 install virtualenv\n  sudo /usr/local/bin/pip3 install virtualenvwrapper\n  ```\n\n- 创建目录存放虚拟环境\n\n  ```\n  mkdir $HOME/.virtualenvs\n  ```\n\n- 修改~/.bashrc文件\n\n  ```\n  sudo vim~/.bashrc\n  # 添加下面的内容\n  export WORKON_HOME=$HOME/.virtualenvs\n  export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3.6\n  source /usr/local/bin/virtualenvwrapper.sh\n  ```\n\n- 运行\n\n  ```\n  source ~/.bashrc\n  ```\n\n- 创建并进入虚拟环境\n\n  ```\n  mkvirtualenv myenv\n  ```\n\n### 安装Django并创建项目\n\n- 虚拟环境下安装Django==1.11.20\n\n  ```\n  pip install django==1.11.20\n  ```\n\n- 创建项目\n\n  ```\n  # 进入放置项目的文件夹\n  cd /home/root/pydj\n  sudo /home/admin/.virtualenvs/myenv/bin/django-admin startproject mysite\n  ```\n\n- 获取文件夹权限，防止runserver时数据库出错\n\n  ```\n  sudo chmod -R 777 /home/root/pydj\n  ```\n\n- 将你的服务器ip添加到settings.py，避免外网访问错误\n\n  ```\n  ALLOWED_HOSTS = ['myip']\n  ```\n\n- 试运行项目，不指定0.0.0.0外网访问会出错\n\n  ```\n  python manage.py runserver 0.0.0.0:8000\n  ```\n\n  访问：http://myip:8000 可以看到：\n\n  ```\n  It worked!\n  Congratulations on your first Django-powered page.\n  Next, start your first app by running python manage.py startapp [app_label].\n  You're seeing this message because you have DEBUG = True in your Django settings file and you haven't configured any URLs. Get to work!\n  ```\n\n### uWSGI的安装和配置\n\n- 虚拟环境下安装uWSGI\n\n  ```\n  pip install uwsgi\n  ```\n\n- 测试\n\n  创建一个test.py文件，内容如下：\n\n  ```\n  def application(env, start_response):\n      start_response('200 OK', [('Content-Type','text/html')])\n      return [b\"Hello World\"] # python3\n      #return [\"Hello World\"] # python2\n  ```\n\n  运行uWSGI:\n\n  ```\n  uwsgi --http :8000 --wsgi-file test.py\n  ```\n\n  访问 http://myip:8000 可以看到：Hello World\n\n- 使用uWSGI运行Django项目\n\n  ```\n  uwsgi --http :8000 --module mysite.wsgi\n  ```\n\n### nginx的安装和配置\n\n- 安装nginx\n\n  ```\n  # 安装nginx源\n  sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n  安装nginx\n  yum install -y nginx\n  ```\n\n- 测试\n\n  ```\n  sudo nginx\n  ```\n\n  浏览器打开ip地址可以看到Welcome to nginx!\n\n- 进入django项目文件夹，创建uwsgi_params文件，添加如下内容：\n\n  ```\n  uwsgi_param  QUERY_STRING       $query_string;\n  uwsgi_param  REQUEST_METHOD     $request_method;\n  uwsgi_param  CONTENT_TYPE       $content_type;\n  uwsgi_param  CONTENT_LENGTH     $content_length;\n  \n  uwsgi_param  REQUEST_URI        $request_uri;\n  uwsgi_param  PATH_INFO          $document_uri;\n  uwsgi_param  DOCUMENT_ROOT      $document_root;\n  uwsgi_param  SERVER_PROTOCOL    $server_protocol;\n  uwsgi_param  REQUEST_SCHEME     $scheme;\n  uwsgi_param  HTTPS              $https if_not_empty;\n  \n  uwsgi_param  REMOTE_ADDR        $remote_addr;\n  uwsgi_param  REMOTE_PORT        $remote_port;\n  uwsgi_param  SERVER_PORT        $server_port;\n  uwsgi_param  SERVER_NAME        $server_name;\n  ```\n\n- 在 /etc/nginx/ 文件夹下创建 sites-enabled 文件夹，并在其下创建nginx.conf，添加如下内容：\n\n  ```\n  # nginx.conf\n  \n  # the upstream component nginx needs to connect to\n  upstream django {\n      # server unix:///path/to/your/mysite/mysite.sock; # for a file socket\n      server 127.0.0.1:8001; # for a web port socket (we'll use this first)\n  }\n  \n  # configuration of the server\n  server {\n      # the port your site will be served on\n      listen      80;\n      # the domain name it will serve for\n      server_name .example.com; # substitute your machine's IP address or FQDN\n      charset     utf-8;\n  \n      # max upload size\n      client_max_body_size 75M;   # adjust to taste\n  \n      # Django media\n      location /media  {\n          alias /path/to/your/mysite/media;  # your Django project's media files - amend as required\n      }\n  \n      location /static {\n          alias /path/to/your/mysite/static; # your Django project's static files - amend as required\n      }\n  \n      # Finally, send all non-media requests to the Django server.\n      location / {\n          uwsgi_pass  django;\n          include     /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed\n      }\n  }\n  ```\n\n- 修改/etc/nginx/nginx.conf，在http下添加：\n\n  ```\n  include /etc/nginx/sites-enabled/*;\n  ```\n\n- 部署静态文件\n\n  在运行nginx之前，你必须收集所有的Django静态文件到静态文件夹里。首先，必须编辑mysite/settings.py，添加:\n\n  ```\n  STATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\n  ```\n\n  然后运行\n\n  ```\n  python manage.py collectstatic\n  ```\n\n- 重启nginx\n\n  ```\n  sudo /usr/sbin/nginx -s reload\n  ```\n\n  此时打开 ip:8000 会出现502错误，因为nginx与uwsgi的socket通信还没开始。\n\n  虚拟环境下运行：\n\n  ```\n  uwsgi --socket :8001 --wsgi-file test.py\n  ```\n\n  此时，打开ip:8000可以看到Hello World。\n\n### 使用Unix sockets代替端口\n\n编辑sites-enabled文件夹下的nginx.conf文件，修改如下：\n\n```\nserver unix:///path/to/your/mysite/mysite.sock; # for a file socket  \n# server 127.0.0.1:8001; # for a web port socket (we'll use this first)\n```\n\n重启nginx。\n\n重新运行uWSGI：\n\n```\nuwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=666\n```\n\n### 使用uWSGI和Nginx运行django项目\n\n```\nuwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=666\n```\n\n现在uwsgi和nginx应该在服务你的Django应用，而不是hello world。\n\n### 配置uWSGI的ini文件\n\n- 项目文件夹下创建django_uwsgi.ini，添加以下内容：\n\n  ```\n  # django_uwsgi.ini file\n  [uwsgi]\n  \n  # Django-related settings\n  # the base directory (full path)\n  chdir           = /path/to/your/project  \n  # Django's wsgi file\n  module          = project.wsgi  \n  # the virtualenv (full path)\n  #home            = /path/to/virtualenv\n  \n  # process-related settings\n  # master\n  master          = true  \n  # maximum number of worker processes\n  processes       = 10  \n  # the socket (use the full path to be safe\n  socket          = mysite.sock  \n  # ... with appropriate permissions - may be needed\n  chmod-socket    = 666\n  # clear environment on exit\n  vacuum          = true\n  ```\n\n  使用如下命令运行：\n\n  ```\n  uwsgi --ini django_uwsgi.ini\n  ```\n\n### 附\n\n- 让uwsgi在后台运行：\n\n  ```\n  uwsgi --ini mysite_uwsgi.ini --logto mysite.log &\n  ```\n\n- 查看uwsgi进程\n\n  ```\n  ps aux|grep uwsgi\n  ```\n\n- 杀死uwsgi进程\n\n  ```\n  #停止进程\n  uwsgi --stop uwsgi.pid\n  #kill pid会发送SIGTERM，只会导致重启，而不是结束掉。需要发送SIGINT或SIGQUIT，对应着是INT才可以\n  killall -s INT uwsgi\n  ```\n\n以上就是在服务器中部署Django项目的所有过程，如有不当之处请指正。","tags":["django","web服务器"],"categories":["Django"]}]